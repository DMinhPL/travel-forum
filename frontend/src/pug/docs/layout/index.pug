extends ../../layouts/_layout_doc 
block setting
    -var mainActive = 'docs';
    -var slideActive = 'overview';
    - title = "Layout - Overview"
block navsection
    ul.section-nav
        li.toc-entry.toc-h2
            a(href='#containers') Containers
        li.toc-entry.toc-h2
            a(href='#responsive-breakpoints') Responsive breakpoints
        li.toc-entry.toc-h2
            a(href='#z-index') Z-index

block content 
    h1.bd-title#content Overview
    p.bd-lead Components and options for laying out your Bootstrap project, including wrapping containers, a powerful grid system, a flexible media object, and responsive utility classes.

    h2#containers Containers
    p
        | Containers are the most basic layout element in Bootstrap and are 
        strong required when using our default grid system
        | . Choose from a responsive, fixed-width container (meaning its 
        code.highlighter-rouge max-width
        |  changes at each breakpoint) or fluid-width (meaning it’s 
        code.highlighter-rouge 100%
        |  wide all the time).
    p
        | While containers 
        em can
        |  be nested, most layouts do not require a nested container.
    .bd-example
        .bd-example-container
            .bd-example-container-header
            .bd-example-container-sidebar
            .bd-example-container-body
    figure.highlight
        pre
            code.css.
                .container
                    // Content here
    p
        | Use 
        code.highlighter-rouge .container-fluid
        |  for a full width container, spanning the entire width of the viewport.
    .bd-example
        .bd-example-container.bd-example-container-fluid
            .bd-example-container-header
            .bd-example-container-sidebar
            .bd-example-container-body
    figure.highlight
        pre
            code.css.
                .container-fluid
                 
    h2#responsive-breakpoints Responsive breakpoints
    p
        | Since Bootstrap is developed to be mobile first, we use a handful of 
        a(href='https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries') media queries
        |  to create sensible breakpoints for our layouts and interfaces. These breakpoints are mostly based on minimum viewport widths and allow us to scale up elements as the viewport changes.
    p
        | Bootstrap primarily uses the following media query ranges—or breakpoints—in our source Sass files for our layout, grid system, and components.
    figure.highlight
        pre
            code.css.
                // Extra small devices (portrait phones, less than 576px)
                // No media query for `xs` since this is the default in Bootstrap
    
                // Small devices (landscape phones, 576px and up)
                @media (min-width: 576px) { ... }

                // Medium devices (tablets, 768px and up)
                @media (min-width: 768px) { ... }

                // Large devices (desktops, 992px and up)
                @media (min-width: 992px) { ... }

                // Extra large devices (large desktops, 1200px and up)
                @media (min-width: 1200px) { ... }
    p
        | Since we write our source CSS in Sass, all our media queries are available via Sass mixins:
    figure.highlight
        pre
            code.css.
                // No media query necessary for xs breakpoint as it's effectively `@media (min-width: 0) { ... }`
                @include media-breakpoint-up(sm) { ... }
                @include media-breakpoint-up(md) { ... }
                @include media-breakpoint-up(lg) { ... }
                @include media-breakpoint-up(xl) { ... }

                // Example: Hide starting at `min-width: 0`, and then show at the `sm` breakpoint
                .custom-class {
                    display: none;
                }
                @include media-breakpoint-up(sm) {
                    .custom-class {
                        display: block;
                    }
                }
    p
        | We occasionally use media queries that go in the other direction (the given screen size 
        em or smaller
        | ):
    figure.highlight
        pre
            code.css.
                // Extra small devices (portrait phones, less than 576px)
                @media (max-width: 575.98px) { ... }

                // Small devices (landscape phones, less than 768px)
                @media (max-width: 767.98px) { ... }

                // Medium devices (tablets, less than 992px)
                @media (max-width: 991.98px) { ... }

                // Large devices (desktops, less than 1200px)
                @media (max-width: 1199.98px) { ... }

                // Extra large devices (large desktops)
                // No media query since the extra-large breakpoint has no upper bound on its width
    .bd-callout.bd-callout-info
        p
            | Note that since browsers do not currently support 
            a(href='https://www.w3.org/TR/mediaqueries-4/#range-context') range context queries
            | , we work around the limitations of 
            a(href='https://www.w3.org/TR/mediaqueries-4/#mq-min-max')
                code.highlighter-rouge min-
                |  and 
                code.highlighter-rouge max-
                |  prefixes
            |  and viewports with fractional widths (which can occur under certain conditions on high-dpi devices, for instance) by using values with higher precision for these comparisons.
    p Once again, these media queries are also available via Sass mixins:
    figure.highlight
        pre
            code.css.
                @include media-breakpoint-down(xs) { ... }
                @include media-breakpoint-down(sm) { ... }
                @include media-breakpoint-down(md) { ... }
                @include media-breakpoint-down(lg) { ... }
                // No media query necessary for xl breakpoint as it has no upper bound on its width

                // Example: Style from medium breakpoint and down
                @include media-breakpoint-down(md) {
                    .custom-class {
                        display: block;
                    }
                }
    p
        | There are also media queries and mixins for targeting a single segment of screen sizes using the minimum and maximum breakpoint widths.
    figure.highlight
        pre
            code.css.
                // Extra small devices (portrait phones, less than 576px)
                @media (max-width: 575.98px) { ... }

                // Small devices (landscape phones, 576px and up)
                @media (min-width: 576px) and (max-width: 767.98px) { ... }

                // Medium devices (tablets, 768px and up)
                @media (min-width: 768px) and (max-width: 991.98px) { ... }

                // Large devices (desktops, 992px and up)
                @media (min-width: 992px) and (max-width: 1199.98px) { ... }

                // Extra large devices (large desktops, 1200px and up)
                @media (min-width: 1200px) { ... }

    p These media queries are also available via Sass mixins:
    figure.highlight
        pre
            code.css.
                @include media-breakpoint-only(xs) { ... }
                @include media-breakpoint-only(sm) { ... }
                @include media-breakpoint-only(md) { ... }
                @include media-breakpoint-only(lg) { ... }
                @include media-breakpoint-only(xl) { ... }

    p Similarly, media queries may span multiple breakpoint widths:
    figure.highlight
        pre
            code.css.
                // Example
                // Apply styles starting from medium devices and up to extra large devices
                @media (min-width: 768px) and (max-width: 1199.98px) { ... }
    p The Sass mixin for targeting the same screen size range would be:
    figure.highlight
        pre
            code.css.
                @include media-breakpoint-between(md, xl) { ... }
    h2#z-index Z-index
    p
        | Several Bootstrap components utilize 
        code.highlighter-rouge z-index
        | , the CSS property that helps control layout by providing a third axis to arrange content. We utilize a default z-index scale in Bootstrap that’s been designed to properly layer navigation, tooltips and popovers, modals, and more.
    p
        | These higher values start at an arbitrary number, high and specific enough to ideally avoid conflicts. We need a standard set of these across our layered components—tooltips, popovers, navbars, dropdowns, modals—so we can be reasonably consistent in the behaviors. There’s no reason we couldn’t have used 
        code.highlighter-rouge 100
        | + or 
        code.highlighter-rouge 500
        | +.
    p
        | We don’t encourage customization of these individual values; should you change one, you likely need to change them all.
    figure.highlight
        pre
            code.css.
                $zindex-dropdown:          1000 !default;
                $zindex-sticky:            1020 !default;
                $zindex-fixed:             1030 !default;
                $zindex-modal-backdrop:    1040 !default;
                $zindex-modal:             1050 !default;
                $zindex-popover:           1060 !default;
                $zindex-tooltip:           1070 !default;
    p
        | To handle overlapping borders within components (e.g., buttons and inputs in input groups), we use low single digit 
        code.highlighter-rouge z-index
        |  values of 
        code.highlighter-rouge 1
        | , 
        code.highlighter-rouge 2
        | , and 
        code.highlighter-rouge 3
        |  for default, hover, and active states. On hover/focus/active, we bring a particular element to the forefront with a higher 
        code.highlighter-rouge z-index
        |  value to show their border over the sibling elements.
