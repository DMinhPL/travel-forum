extends ../../layouts/_layout_doc 
block setting
    -var mainActive = 'docs';
    -var slideActive = 'grid';
    - title = "Layout - Grid system"
block navsection
    ul.section-nav
        li.toc-entry.toc-h2
            a(href='#how-it-works') How it works
        li.toc-entry.toc-h2
            a(href='#grid-options') Grid options
        li.toc-entry.toc-h2
            a(href='#auto-layout-columns') Auto-layout columns
            ul
                li.toc-entry.toc-h3
                    a(href='#equal-width') Equal-width
                li.toc-entry.toc-h3
                    a(href='#setting-one-column-width') Setting one column width
                li.toc-entry.toc-h3
                    a(href='#variable-width-content') Variable width content
                li.toc-entry.toc-h3
                    a(href='#equal-width-multi-row') Equal-width multi-row
        li.toc-entry.toc-h2
            a(href='#responsive-classes') Responsive classes
            ul
                li.toc-entry.toc-h3
                    a(href='#all-breakpoints') All breakpoints
                li.toc-entry.toc-h3
                    a(href='#stacked-to-horizontal') Stacked to horizontal
                li.toc-entry.toc-h3
                    a(href='#mix-and-match') Mix and match
        li.toc-entry.toc-h2
            a(href='#alignment') Alignment
            ul
                li.toc-entry.toc-h3
                    a(href='#vertical-alignment') Vertical alignment
                li.toc-entry.toc-h3
                    a(href='#horizontal-alignment') Horizontal alignment
                li.toc-entry.toc-h3
                    a(href='#no-gutters') No gutters
                li.toc-entry.toc-h3
                    a(href='#column-wrapping') Column wrapping
                li.toc-entry.toc-h3
                    a(href='#column-breaks') Column breaks
        li.toc-entry.toc-h2
            a(href='#reordering') Reordering
            ul
                li.toc-entry.toc-h3
                    a(href='#order-classes') Order classes
                li.toc-entry.toc-h3
                    a(href='#offsetting-columns') Offsetting columns
                    ul
                        li.toc-entry.toc-h4
                            a(href='#offset-classes') Offset classes
                        li.toc-entry.toc-h4
                            a(href='#margin-utilities') Margin utilities
        li.toc-entry.toc-h2
            a(href='#nesting') Nesting
        li.toc-entry.toc-h2
            a(href='#sass-mixins') Sass mixins
            ul
                li.toc-entry.toc-h3
                    a(href='#variables') Variables
                li.toc-entry.toc-h3
                    a(href='#mixins') Mixins
                li.toc-entry.toc-h3
                    a(href='#example-usage') Example usage
        li.toc-entry.toc-h2
            a(href='#customizing-the-grid') Customizing the grid
            ul
                li.toc-entry.toc-h3
                    a(href='#columns-and-gutters') Columns and gutters
                li.toc-entry.toc-h3
                    a(href='#grid-tiers') Grid tiers
block content 
    h1.bd-title#content Grid system
    p.bd-lead Use our powerful mobile-first flexbox grid to build layouts of all shapes and sizes thanks to a twelve column system, five default responsive tiers, Sass variables and mixins, and dozens of predefined classes.

    h2#how-it-works How it works
    p
        | Bootstrap’s grid system uses a series of containers, rows, and columns to layout and align content. It’s built with 
        a(href='https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox') flexbox
        |  and is fully responsive. Below is an example and an in-depth look at how the grid comes together.
    p
        strong New to or unfamiliar with flexbox?
        a(href='https://css-tricks.com/snippets/css/a-guide-to-flexbox/#flexbox-background') Read this CSS Tricks flexbox guide
        |  for background, terminology, guidelines, and code snippets.
    .bd-example-row
        .bd-example
            .container
                .row
                    .col-sm
                        | One of three columns
                    .col-sm
                        | One of three columns
                    .col-sm
                        | One of three columns
        figure.highlight
            pre
                code.css.
                    .bd-example
                        .container
                            .row
                                .col-sm
                                    | One of three columns
                                .col-sm
                                    | One of three columns
                                .col-sm
                                    | One of three columns
    p
        | The above example creates three equal-width columns on small, medium, large, and extra large devices using our predefined grid classes. Those columns are centered in the page with the parent 
        code.highlighter-rouge .container
        | .
    p Breaking it down, here’s how it works:
    ul
        li
            | Containers provide a means to center and horizontally pad your site’s contents. Use 
            code.highlighter-rouge .container
            |  for a responsive pixel width or 
            code.highlighter-rouge .container-fluid
            |  for 
            code.highlighter-rouge width: 100%
            |  across all viewport and device sizes.
        li
            | Rows are wrappers for columns. Each column has horizontal 
            code.highlighter-rouge padding
            |  (called a gutter) for controlling the space between them. This 
            code.highlighter-rouge padding
            |  is then counteracted on the rows with negative margins. This way, all the content in your columns is visually aligned down the left side.
        li
            | In a grid layout, content must be placed within columns and only columns may be immediate children of rows.
        li
            | Thanks to flexbox, grid columns without a specified 
            code.highlighter-rouge width
            |  will automatically layout as equal width columns. For example, four instances of 
            code.highlighter-rouge .col-sm
            |  will each automatically be 25% wide from the small breakpoint and up. See the 
            a(href='#auto-layout-columns') auto-layout columns
            |  section for more examples.
        li
            | Column classes indicate the number of columns you’d like to use out of the possible 12 per row. So, if you want three equal-width columns across, you can use 
            code.highlighter-rouge .col-4
            | .
        li
            | Column 
            code.highlighter-rouge width
            | s are set in percentages, so they’re always fluid and sized relative to their parent element.
        li
            | Columns have horizontal 
            code.highlighter-rouge padding
            |  to create the gutters between individual columns, however, you can remove the 
            code.highlighter-rouge margin
            |  from rows and 
            code.highlighter-rouge padding
            |  from columns with 
            code.highlighter-rouge .no-gutters
            |  on the 
            code.highlighter-rouge .row
            | .
        li
            | To make the grid responsive, there are five grid breakpoints, one for each 
            a(href='/docs/layout/overview/#responsive-breakpoints') responsive breakpoint
            | : all breakpoints (extra small), small, medium, large, and extra large.
        li
            | Grid breakpoints are based on minimum width media queries, meaning 
            strong they apply to that one breakpoint and all those above it
            |  (e.g., 
            code.highlighter-rouge .col-sm-4
            |  applies to small, medium, large, and extra large devices, but not the first 
            code.highlighter-rouge xs
            |  breakpoint).
        li
            | You can use predefined grid classes (like 
            code.highlighter-rouge .col-4
            | ) or 
            a(href='#sass-mixins') Sass mixins
            |  for more semantic markup.
    p
        | Be aware of the limitations and 
        a(href='https://github.com/philipwalton/flexbugs') bugs around flexbox
        | , like the 
        a(href='https://github.com/philipwalton/flexbugs#flexbug-9') inability to use some HTML elements as flex containers
        | .
    h2#grid-options Grid options
    p
        | While Bootstrap uses 
        code.highlighter-rouge em
        | s or 
        code.highlighter-rouge rem
        | s for defining most sizes, 
        code.highlighter-rouge px
        | s are used for grid breakpoints and container widths. This is because the viewport width is in pixels and does not change with the 
        a(href='https://drafts.csswg.org/mediaqueries-3/#units') font size
        | .
    p
        | See how aspects of the Bootstrap grid system work across multiple devices with a handy table.
    table.table.table-bordered.table-striped
        thead
            tr
                th
                th.text-center
                    | Extra small
                    br
                    small <576px
                th.text-center
                    | Small
                    br
                    small ≥576px
                th.text-center
                    | Medium
                    br
                    small ≥768px
                th.text-center
                    | Large
                    br
                    small ≥992px
                th.text-center
                    | Extra large
                    br
                    small ≥1200px
        tbody
            tr
                th.text-nowrap(scope='row') Max container width
                td None (auto)
                td 540px
                td 720px
                td 960px
                td 1140px
            tr
                th.text-nowrap(scope='row') Class prefix
                td
                    code .col-
                td
                    code .col-sm-
                td
                    code .col-md-
                td
                    code .col-lg-
                td
                    code .col-xl-
            tr
                th.text-nowrap(scope='row') # of columns
                td(colspan='5') 12
            tr
                th.text-nowrap(scope='row') Gutter width
                td(colspan='5') 30px (15px on each side of a column)
            tr
                th.text-nowrap(scope='row') Nestable
                td(colspan='5') Yes
            tr
                th.text-nowrap(scope='row') Column ordering
                td(colspan='5') Yes
    h2#auto-layout-columns Auto-layout columns
    p
        | Utilize breakpoint-specific column classes for easy column sizing without an explicit numbered class like 
        code.highlighter-rouge .col-sm-6
        | .
    h3#equal-width Equal-width
    p
        | For example, here are two grid layouts that apply to every device and viewport, from 
        code.highlighter-rouge xs
        |  to 
        code.highlighter-rouge xl
        | . Add any number of unit-less classes for each breakpoint you need and every column will be the same width.
    .bd-example-row
        .bd-example
            .container
                .row
                    .col
                        | 1 of 2
                    .col
                        | 2 of 2
                .row
                    .col
                        | 1 of 3
                    .col
                        | 2 of 3
                    .col
                        | 3 of 3
        figure.highlight
            pre
                code.css.
                    .container
                        .row
                            .col
                                | 1 of 2
                            .col
                                | 2 of 2
                        .row
                            .col
                                | 1 of 3
                            .col
                                | 2 of 3
                            .col
                                | 3 of 3
    p
        | Equal-width columns can be broken into multiple lines, but there was a 
        a(href='https://github.com/philipwalton/flexbugs#flexbug-11') Safari flexbox bug
        |  that prevented this from working without an explicit 
        code.highlighter-rouge flex-basis
        |  or 
        code.highlighter-rouge border
        | . There are workarounds for older browser versions, but they shouldn’t be necessary if you’re up-to-date.
    .bd-example-row
        .bd-example
            .container
                .row
                    .col Column
                    .col Column
                    .w-100
                    .col Column
                    .col Column
        figure.highlight
            pre
                code.css.
                    .container
                        .row
                            .col Column
                            .col Column
                            .w-100
                            .col Column
                            .col Column
    h3#setting-one-column-width Setting one column width
    p
        | Auto-layout for flexbox grid columns also means you can set the width of one column and have the sibling columns automatically resize around it. You may use predefined grid classes (as shown below), grid mixins, or inline widths. Note that the other columns will resize no matter the width of the center column.
    .bd-example-row
        .bd-example
            .container
                .row
                    .col
                        | 1 of 3
                    .col-6
                        | 2 of 3 (wider)
                    .col
                        | 3 of 3
                .row
                    .col
                        | 1 of 3
                    .col-5
                        | 2 of 3 (wider)
                    .col
                        | 3 of 3
        figure.highlight
            pre
                code.css.
                    .container
                        .row
                            .col
                                | 1 of 3
                            .col-6
                                | 2 of 3 (wider)
                            .col
                                | 3 of 3
                        .row
                            .col
                                | 1 of 3
                            .col-5
                                | 2 of 3 (wider)
                            .col
                                | 3 of 3
    h3#variable-width-content Variable width content
    p
        | Use 
        code.highlighter-rouge col-{breakpoint}-auto
        |  classes to size columns based on the natural width of their content.
    .bd-example-row
        .bd-example
            .container
                .row.justify-content-md-center
                    .col.col-lg-2
                        | 1 of 3
                    .col-md-auto
                        | Variable width content
                    .col.col-lg-2
                        | 3 of 3
                .row
                    .col
                        | 1 of 3
                    .col-md-auto
                        | Variable width content
                    .col.col-lg-2
                        | 3 of 3
        figure.highlight
            pre
                code.css.
                    .container
                        .row.justify-content-md-center
                            .col.col-lg-2
                                | 1 of 3
                            .col-md-auto
                                | Variable width content
                            .col.col-lg-2
                                | 3 of 3
                        .row
                            .col
                                | 1 of 3
                            .col-md-auto
                                | Variable width content
                            .col.col-lg-2
                                | 3 of 3
    h3#equal-width-multi-row Equal-width multi-row
    p
        | Create equal-width columns that span multiple rows by inserting a 
        code.highlighter-rouge .w-100
        |  where you want the columns to break to a new line. Make the breaks responsive by mixing the 
        code.highlighter-rouge .w-100
        |  with some 
        a(href='/docs/utilities/display/') responsive display utilities
        | .
    .bd-example-row
        .bd-example
            .row
                .col col
                .col col
                .w-100
                .col col
                .col col
        figure.highlight
            pre
                code.css.
                    .row
                        .col col
                        .col col
                        .w-100
                        .col col
                        .col col
    h2#responsive-classes Responsive classes
    p
        | Bootstrap’s grid includes five tiers of predefined classes for building complex responsive layouts. Customize the size of your columns on extra small, small, medium, large, or extra large devices however you see fit.
    h3#all-breakpoints All breakpoints
    p
        | For grids that are the same from the smallest of devices to the largest, use the 
        code.highlighter-rouge .col
        |  and 
        code.highlighter-rouge .col-*
        |  classes. Specify a numbered class when you need a particularly sized column; otherwise, feel free to stick to 
        code.highlighter-rouge .col
        | .
    .bd-example-row
        .bd-example
            .row
                .col col
                .col col
                .col col
                .col col
            .row
                .col-8 col-8
                .col-4 col-4
        figure.highlight
            pre
                code.css.
                    .row
                        .col col
                        .col col
                        .col col
                        .col col
                    .row
                        .col-8 col-8
                        .col-4 col-4
    h3#stacked-to-horizontal Stacked to horizontal
    p
        | Using a single set of 
        code.highlighter-rouge .col-sm-*
        |  classes, you can create a basic grid system that starts out stacked and becomes horizontal at the small breakpoint (
        code.highlighter-rouge sm
        | ).
    .bd-example-row
        .bd-example
            .row
                .col-sm-8 col-sm-8
                .col-sm-4 col-sm-4
            .row
                .col-sm col-sm
                .col-sm col-sm
                .col-sm col-sm
        figure.highlight
            pre
                code.css.
                    .row
                        .col-sm-8 col-sm-8
                        .col-sm-4 col-sm-4
                    .row
                        .col-sm col-sm
                        .col-sm col-sm
                        .col-sm col-sm
    h3#mix-and-match Mix and match
    p
        | Don’t want your columns to simply stack in some grid tiers? Use a combination of different classes for each tier as needed. See the example below for a better idea of how it all works.
    .bd-example-row
        .bd-example
            // Stack the columns on mobile by making one full-width and the other half-width
            .row
                .col-12.col-md-8 .col-12 .col-md-8
                .col-6.col-md-4 .col-6 .col-md-4
            // Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop
            .row
                .col-6.col-md-4 .col-6 .col-md-4
                .col-6.col-md-4 .col-6 .col-md-4
                .col-6.col-md-4 .col-6 .col-md-4
            // Columns are always 50% wide, on mobile and desktop
            .row
                .col-6 .col-6
                .col-6 .col-6
        figure.highlight
            pre
                code.css.
                    // Stack the columns on mobile by making one full-width and the other half-width
                    .row
                        .col-12.col-md-8 .col-12 .col-md-8
                        .col-6.col-md-4 .col-6 .col-md-4
                    // Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop
                    .row
                        .col-6.col-md-4 .col-6 .col-md-4
                        .col-6.col-md-4 .col-6 .col-md-4
                        .col-6.col-md-4 .col-6 .col-md-4
                    // Columns are always 50% wide, on mobile and desktop
                    .row
                        .col-6 .col-6
                        .col-6 .col-6
    h2#alignment Alignment
    p Use flexbox alignment utilities to vertically and horizontally align columns.
    h3#vertical-alignment Vertical alignment
    .bd-example-row.bd-example-row-flex-cols
        .bd-example
            .container
                .row.align-items-start
                    .col
                        | One of three columns
                    .col
                        | One of three columns
                    .col
                        | One of three columns
                .row.align-items-center
                    .col
                        | One of three columns
                    .col
                        | One of three columns
                    .col
                        | One of three columns
                .row.align-items-end
                    .col
                        | One of three columns
                    .col
                        | One of three columns
                    .col
                        | One of three columns
        figure.highlight
            pre
                code.css.
                    .container
                        .row.align-items-start
                            .col
                                | One of three columns
                            .col
                                | One of three columns
                            .col
                                | One of three columns
                        .row.align-items-center
                            .col
                                | One of three columns
                            .col
                                | One of three columns
                            .col
                                | One of three columns
                        .row.align-items-end
                            .col
                                | One of three columns
                            .col
                                | One of three columns
                            .col
                                | One of three columns
    .bd-example-row.bd-example-row-flex-cols
        .bd-example
            .container
                .row
                    .col.align-self-start
                        | One of three columns
                    .col.align-self-center
                        | One of three columns
                    .col.align-self-end
                        | One of three columns
        figure.highlight
            pre
                code.css.
                    .container
                        .row
                            .col.align-self-start
                                | One of three columns
                            .col.align-self-center
                                | One of three columns
                            .col.align-self-end
                                | One of three columns
    h3#horizontal-alignment Horizontal alignment
    .bd-example-row
        .bd-example
            .container
                .row.justify-content-start
                    .col-4
                        | One of two columns
                    .col-4
                        | One of two columns
                .row.justify-content-center
                    .col-4
                        | One of two columns
                    .col-4
                        | One of two columns
                .row.justify-content-end
                    .col-4
                        | One of two columns
                    .col-4
                        | One of two columns
                .row.justify-content-around
                    .col-4
                        | One of two columns
                    .col-4
                        | One of two columns
                .row.justify-content-between
                    .col-4
                        | One of two columns
                    .col-4
                        | One of two columns
        figure.highlight
            pre
                code.css.
                    .container
                        .row.justify-content-start
                            .col-4
                                | One of two columns
                            .col-4
                                | One of two columns
                        .row.justify-content-center
                            .col-4
                                | One of two columns
                            .col-4
                                | One of two columns
                        .row.justify-content-end
                            .col-4
                                | One of two columns
                            .col-4
                                | One of two columns
                        .row.justify-content-around
                            .col-4
                                | One of two columns
                            .col-4
                                | One of two columns
                        .row.justify-content-between
                            .col-4
                                | One of two columns
                            .col-4
                                | One of two columns
    h3#no-gutters No gutters
    p
        | The gutters between columns in our predefined grid classes can be removed with 
        code.highlighter-rouge .no-gutters
        | . This removes the negative 
        code.highlighter-rouge margin
        | s from 
        code.highlighter-rouge .row
        |  and the horizontal 
        code.highlighter-rouge padding
        |  from all immediate children columns.
    p
        | Here’s the source code for creating these styles. Note that column overrides are scoped to only the first children columns and are targeted via 
        a(href='https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors') attribute selector
        | . While this generates a more specific selector, column padding can still be further customized with 
        a(href='/docs/utilities/spacing/') spacing utilities
        | .
    p
        strong Need an edge-to-edge design?
        |  Drop the parent 
        code.highlighter-rouge .container
        |  or 
        code.highlighter-rouge .container-fluid
        | .
    figure.highlight
        pre
            code.scss.
                .no-gutters {
                    margin-right: 0;
                    margin-left: 0;

                    > .col,
                    > [class*="col-"] {
                        padding-right: 0;
                        padding-left: 0;
                    }
                }
    p
        | In practice, here’s how it looks. Note you can continue to use this with all other predefined grid classes (including column widths, responsive tiers, reorders, and more).
    .bd-example-row
        .bd-example
            .row.no-gutters
                .col-12.col-sm-6.col-md-8 .col-12 .col-sm-6 .col-md-8
                .col-6.col-md-4 .col-6 .col-md-4
        figure.highlight
            pre
                code.css.
                    .row.no-gutters
                        .col-12.col-sm-6.col-md-8 .col-12 .col-sm-6 .col-md-8
                        .col-6.col-md-4 .col-6 .col-md-4
    h3#column-wrapping Column wrapping
    p
        | If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.
    .bd-example-row
        .bd-example
            .row
                .col-9 .col-9
                .col-4
                    | .col-4
                    br
                    | Since 9 + 4 = 13 > 12, this 4-column-wide div gets wrapped onto a new line as one contiguous unit.
                .col-6
                    | .col-6
                    br
                    | Subsequent columns continue along the new line.
        figure.highlight
            pre
                code.css.
                    .row
                        .col-9 .col-9
                        .col-4
                            | .col-4
                            br
                            | Since 9 + 4 = 13 > 12, this 4-column-wide div gets wrapped onto a new line as one contiguous unit.
                        .col-6
                            | .col-6
                            br
                            | Subsequent columns continue along the new line.
    h3#column-breaks Column breaks
    p
        | Breaking columns to a new line in flexbox requires a small hack: add an element with 
        code.highlighter-rouge width: 100%
        |  wherever you want to wrap your columns to a new line. Normally this is accomplished with multiple 
        code.highlighter-rouge .row
        | s, but not every implementation method can account for this.
    .bd-example-row
        .bd-example
            .row
                .col-6.col-sm-3 .col-6 .col-sm-3
                .col-6.col-sm-3 .col-6 .col-sm-3
                // Force next columns to break to new line
                .w-100
                .col-6.col-sm-3 .col-6 .col-sm-3
                .col-6.col-sm-3 .col-6 .col-sm-3
        figure.highlight
            pre
                code.css.
                    .row
                        .col-6.col-sm-3 .col-6 .col-sm-3
                        .col-6.col-sm-3 .col-6 .col-sm-3
                        // Force next columns to break to new line
                        .w-100
                        .col-6.col-sm-3 .col-6 .col-sm-3
                        .col-6.col-sm-3 .col-6 .col-sm-3
    p
        | You may also apply this break at specific breakpoints with our 
        a(href='/docs/utilities/display/') responsive display utilities
        | .
    .bd-example-row
        .bd-example
            .row
                .col-6.col-sm-4 .col-6 .col-sm-4
                .col-6.col-sm-4 .col-6 .col-sm-4
                // Force next columns to break to new line at md breakpoint and up
                .w-100.d-none.d-md-block
                .col-6.col-sm-4 .col-6 .col-sm-4
                .col-6.col-sm-4 .col-6 .col-sm-4
        figure.highlight
            pre
                code.css.
                    .row
                        .col-6.col-sm-4 .col-6 .col-sm-4
                        .col-6.col-sm-4 .col-6 .col-sm-4
                        // Force next columns to break to new line at md breakpoint and up
                        .w-100.d-none.d-md-block
                        .col-6.col-sm-4 .col-6 .col-sm-4
                        .col-6.col-sm-4 .col-6 .col-sm-4
    h2#reordering Reordering
    h3#order-classes Order classes
    p
        | Use 
        code.highlighter-rouge .order-
        |  classes for controlling the 
        strong visual order
        |  of your content. These classes are responsive, so you can set the 
        code.highlighter-rouge order
        |  by breakpoint (e.g., 
        code.highlighter-rouge .order-1.order-md-2
        | ). Includes support for 
        code.highlighter-rouge 1
        |  through 
        code.highlighter-rouge 12
        |  across all five grid tiers.
    .bd-example-row
        .bd-example
            .container
                .row
                    .col
                        | First, but unordered
                    .col.order-12
                        | Second, but last
                    .col.order-1
                        | Third, but first
        figure.highlight
            pre
                code.css.
                    .container
                        .row
                            .col
                                | First, but unordered
                            .col.order-12
                                | Second, but last
                            .col.order-1
                                | Third, but first
    p
        | There are also responsive 
        code.highlighter-rouge .order-first
        |  and 
        code.highlighter-rouge .order-last
        |  classes that change the 
        code.highlighter-rouge order
        |  of an element by applying 
        code.highlighter-rouge order: -1
        |  and 
        code.highlighter-rouge order: 13
        |  (
        code.highlighter-rouge order: $columns + 1
        | ), respectively. These classes can also be intermixed with the numbered 
        code.highlighter-rouge .order-*
        |  classes as needed.
    .bd-example-row
        .bd-example
            .container
                .row
                    .col.order-last
                        | First, but last
                    .col
                        | Second, but unordered
                    .col.order-first
                        | Third, but first
        figure.highlight
            pre
                code.css.
                    .container
                        .row
                            .col.order-last
                                | First, but last
                            .col
                                | Second, but unordered
                            .col.order-first
                                | Third, but first
    h3#offsetting-columns Offsetting columns
    p
        | You can offset grid columns in two ways: our responsive 
        code.highlighter-rouge .offset-
        |  grid classes and our 
        a(href='/docs/utilities/spacing/') margin utilities
        | . Grid classes are sized to match columns while margins are more useful for quick layouts where the width of the offset is variable.
    h4#offset-classes Offset classes
    p
        | Move columns to the right using 
        code.highlighter-rouge .offset-md-*
        |  classes. These classes increase the left margin of a column by 
        code.highlighter-rouge *
        |  columns. For example, 
        code.highlighter-rouge .offset-md-4
        |  moves 
        code.highlighter-rouge .col-md-4
        |  over four columns.
    .bd-example-row
        .bd-example
            .row
                .col-md-4 .col-md-4
                .col-md-4.offset-md-4 .col-md-4 .offset-md-4
            .row
                .col-md-3.offset-md-3 .col-md-3 .offset-md-3
                .col-md-3.offset-md-3 .col-md-3 .offset-md-3
            .row
                .col-md-6.offset-md-3 .col-md-6 .offset-md-3
        figure.highlight
            pre
                code.css.
                    .row
                        .col-md-4 .col-md-4
                        .col-md-4.offset-md-4 .col-md-4 .offset-md-4
                    .row
                        .col-md-3.offset-md-3 .col-md-3 .offset-md-3
                        .col-md-3.offset-md-3 .col-md-3 .offset-md-3
                    .row
                        .col-md-6.offset-md-3 .col-md-6 .offset-md-3
    p
        | In addition to column clearing at responsive breakpoints, you may need to reset offsets. See this in action in 
        a(href='/docs/examples/grid/') the grid example
        | .
    .bd-example-row
        .bd-example
            .row
                .col-sm-5.col-md-6 .col-sm-5 .col-md-6
                .col-sm-5.offset-sm-2.col-md-6.offset-md-0 .col-sm-5 .offset-sm-2 .col-md-6 .offset-md-0
            .row
                .col-sm-6.col-md-5.col-lg-6 .col-sm-6 .col-md-5 .col-lg-6
                .col-sm-6.col-md-5.offset-md-2.col-lg-6.offset-lg-0 .col-sm-6 .col-md-5 .offset-md-2 .col-lg-6 .offset-lg-0
        figure.highlight
            pre
                code.css.
                    .row
                        .col-sm-5.col-md-6 .col-sm-5 .col-md-6
                        .col-sm-5.offset-sm-2.col-md-6.offset-md-0 .col-sm-5 .offset-sm-2 .col-md-6 .offset-md-0
                    .row
                        .col-sm-6.col-md-5.col-lg-6 .col-sm-6 .col-md-5 .col-lg-6
                        .col-sm-6.col-md-5.offset-md-2.col-lg-6.offset-lg-0 .col-sm-6 .col-md-5 .offset-md-2 .col-lg-6 .offset-lg-0
    h4#margin-utilities Margin utilities
    p
        | With the move to flexbox in v4, you can use margin utilities like 
        code.highlighter-rouge .mr-auto
        |  to force sibling columns away from one another.
    .bd-example-row
        .bd-example
            .row
                .col-md-4 .col-md-4
                .col-md-4.ml-auto .col-md-4 .ml-auto
            .row
                .col-md-3.ml-md-auto .col-md-3 .ml-md-auto
                .col-md-3.ml-md-auto .col-md-3 .ml-md-auto
            .row
                .col-auto.mr-auto .col-auto .mr-auto
                .col-auto .col-auto
        figure.highlight
            pre
                code.css.
                    .row
                        .col-md-4 .col-md-4
                        .col-md-4.ml-auto .col-md-4 .ml-auto
                    .row
                        .col-md-3.ml-md-auto .col-md-3 .ml-md-auto
                        .col-md-3.ml-md-auto .col-md-3 .ml-md-auto
                    .row
                        .col-auto.mr-auto .col-auto .mr-auto
                        .col-auto .col-auto
    h2#nesting Nesting
    p
        | To nest your content with the default grid, add a new 
        code.highlighter-rouge .row
        |  and set of 
        code.highlighter-rouge .col-sm-*
        |  columns within an existing 
        code.highlighter-rouge .col-sm-*
        |  column. Nested rows should include a set of columns that add up to 12 or fewer (it is not required that you use all 12 available columns).
    .bd-example-row
        .bd-example
            .row
                .col-sm-9
                    | Level 1: .col-sm-9
                    .row
                        .col-8.col-sm-6
                            | Level 2: .col-8 .col-sm-6
                        .col-4.col-sm-6
                            | Level 2: .col-4 .col-sm-6
        figure.highlight
            pre
                code.css.
                    .row
                        .col-sm-9
                            | Level 1: .col-sm-9
                            .row
                                .col-8.col-sm-6
                                    | Level 2: .col-8 .col-sm-6
                                .col-4.col-sm-6
                                    | Level 2: .col-4 .col-sm-6
    h2#sass-mixins Sass mixins
    p
        | When using Bootstrap’s source Sass files, you have the option of using Sass variables and mixins to create custom, semantic, and responsive page layouts. Our predefined grid classes use these same variables and mixins to provide a whole suite of ready-to-use classes for fast responsive layouts.
    h3#variables Variables
    p
        | Variables and maps determine the number of columns, the gutter width, and the media query point at which to begin floating columns. We use these to generate the predefined grid classes documented above, as well as for the custom mixins listed below.
    figure.highlight
        pre
            code.css.
                $grid-columns:      12;
                $grid-gutter-width: 30px;

                $grid-breakpoints: (
                    // Extra small screen / phone
                    xs: 0,
                    // Small screen / phone
                    sm: 576px,
                    // Medium screen / tablet
                    md: 768px,
                    // Large screen / desktop
                    lg: 992px,
                    // Extra large screen / wide desktop
                    xl: 1200px
                );

                $container-max-widths: (
                    sm: 540px,
                    md: 720px,
                    lg: 960px,
                    xl: 1140px
                );
    h3#mixins Mixins
    p
        | Mixins are used in conjunction with the grid variables to generate semantic CSS for individual grid columns.
    figure.highlight
        pre
            code.css.
                // Creates a wrapper for a series of columns
                @include make-row();

                // Make the element grid-ready (applying everything but the width)
                @include make-col-ready();
                @include make-col($size, $columns: $grid-columns);

                // Get fancy by offsetting, or changing the sort order
                @include make-col-offset($size, $columns: $grid-columns);
    h3#example-usage Example usage
    p
        | You can modify the variables to your own custom values, or just use the mixins with their default values. Here’s an example of using the default settings to create a two-column layout with a gap between.
    figure.highlight
        pre
            code.css.
                .example-container {
                    width: 800px;
                    @include make-container();
                }

                .example-row {
                    @include make-row();
                }

                .example-content-main {
                    @include make-col-ready();

                    @include media-breakpoint-up(sm) {
                        @include make-col(6);
                    }
                    @include media-breakpoint-up(lg) {
                        @include make-col(8);
                    }
                }

                .example-content-secondary {
                    @include make-col-ready();

                    @include media-breakpoint-up(sm) {
                        @include make-col(6);
                    }
                    @include media-breakpoint-up(lg) {
                        @include make-col(4);
                    }
                }
    .bd-example
        .example-container
            .example-row
                .example-content-main Main content
                .example-content-secondary Secondary content
    figure.highlight
        pre
            code.css.
                .example-container
                    .example-row
                        .example-content-main Main content
                        .example-content-secondary Secondary content
    h2#customizing-the-grid Customizing the grid
    p
        | Using our built-in grid Sass variables and maps, it’s possible to completely customize the predefined grid classes. Change the number of tiers, the media query dimensions, and the container widths—then recompile.
    h3#columns-and-gutters Columns and gutters
    p
        | The number of grid columns can be modified via Sass variables. 
        code.highlighter-rouge $grid-columns
        |  is used to generate the widths (in percent) of each individual column while 
        code.highlighter-rouge $grid-gutter-width
        |  allows breakpoint-specific widths that are divided evenly across 
        code.highlighter-rouge padding-left
        |  and 
        code.highlighter-rouge padding-right
        |  for the column gutters.
    figure.highlight
        pre
            code.scss.
                $grid-columns: 12 !default;
                $grid-gutter-width: 30px !default;

    h3#grid-tiers Grid tiers
    p
        | Moving beyond the columns themselves, you may also customize the number of grid tiers. If you wanted just four grid tiers, you’d update the 
        code.highlighter-rouge $grid-breakpoints
        |  and 
        code.highlighter-rouge $container-max-widths
        |  to something like this:
    figure.highlight
        pre
            code.css.
                $grid-breakpoints: (
                    xs: 0,
                    sm: 480px,
                    md: 768px,
                    lg: 1024px
                );

                $container-max-widths: (
                    sm: 420px,
                    md: 720px,
                    lg: 960px
                );
    p
        | When making any changes to the Sass variables or maps, you’ll need to save your changes and recompile. Doing so will output a brand new set of predefined grid classes for column widths, offsets, and ordering. Responsive visibility utilities will also be updated to use the custom breakpoints. Make sure to set grid values in 
        code.highlighter-rouge px
        |  (not 
        code.highlighter-rouge rem
        | , 
        code.highlighter-rouge em
        | , or 
        code.highlighter-rouge %
        | ).
